import Image from "next/image";
import { useState } from "react";
import Footer from "../../components/Footer";
import Header from "../../components/Header";
import Navbar from "../../components/Navbar";
import { ColourModification, DietModification, GeneData, GeneModification, mobGenetics, reverseMobDiets, reverseMobGenetics } from "../../data/mobGenetics";

const geneticsByMobId = "genetics-by-id"
const geneticsByDietId = "genetics-by-diet"
const geneticsByGeneId = "genetics-by-gene"

const MobGeneticsPage = () => {
  return (
    <div className="h-screen overflow-x-hidden bg-neutral-800 relative">
      <Header pageName="Genetics Guide" pageDesc="This guide shows you the genetics generated by different mobs." />
      <Navbar />

      <div className="flex flex-col md:flex-row-reverse px-10 lg:px-32 2xl:px-60">
        <section className="w-screen bg-neutral-800 pt-10 overflow-hidden pr-20 2xl:pr-20">
          <h1 className="text-5xl font-semibold text-white">Genetics Guide</h1>
          <div className="pr-10 pt-2 text-white">
            This guide shows you the genetics generated by different mobs.
          </div>
          <MobGeneticsIndex />
          <MobGeneticsByMob />
          <MobGeneticsByDiet />
          <MobGeneticsByGene />
        </section>
      </div>
      <Footer />
    </div>
  );
}

const MobGeneticsIndex = () => {
  const [collapsed, setCollapsed] = useState(true)
  return (
    <div className="mt-5 text-white">
      <h2 className="text-4xl font-semibold text-white">Index</h2>
      <button onClick={() => setCollapsed(!collapsed)}>Toggle Collapsed</button>
      {!collapsed &&
        <div className="underline">
          <div>
            <a href={`#${geneticsByMobId}`}>Genetics By Mob</a>
            <div className="ml-5 flex flex-col">
              {mobGenetics.map((genetics, i) => <a key={i} href={`#${formatEntity(genetics)}`} >{genetics.name}</a>)}
            </div>
          </div>
          <div className="mt-2">
            <a href={`#${geneticsByMobId}`}>Genetics By Diet</a>
            <div className="ml-5 flex flex-col">
              {Array.from(reverseMobDiets.keys()).sort().map((diet, i) => <a key={i} href={`#${formatDiet(diet)}`} >{diet}</a>)}
            </div>
          </div>
          <div className="mt-2">
            <a href={`#${geneticsByMobId}`}>Genetics By Gene</a>
            <div className="ml-5 flex flex-col">
              {Array.from(reverseMobGenetics.keys()).sort().map((gene, i) => <a key={i} href={`#${formatGene(gene)}`} >{gene}</a>)}
            </div>
          </div>
        </div>
      }
    </div>
  )
}

const MobGeneticsByMob = () => {
  return (
    <div className="mt-5">
      <a id={geneticsByMobId} href={`#${geneticsByMobId}`} className="text-4xl font-semibold text-white">Genetics By Mob</a>
      {mobGenetics.map((geneData, i) => <MobGeneticEntry key={i} geneData={geneData} />)}
    </div>
  )
}

const chunkSize = 4;

const MobGeneticEntry = ({ geneData }: { geneData: GeneData }) => {
  const id = formatEntity(geneData)
  return (
    <div className="mt-10">
      <a href={`#${id}`} id={id} className="text-2xl font-semibold text-white">{geneData.name}</a>
      <div className="flex flex-row">
        <div className="w-32 h-32 relative mt-2 mr-2">
          <Image layout="fill" objectFit="contain" src={`/images/guides/genetics/${geneData.image}`} />
        </div>
        <div className="flex-grow flex flex-col ">
          {geneData.geneModifications.length !== 0 &&
            <div className="mb-2">
              <h4 className="text-lg font-semibold text-white">Genes:</h4>
              {geneData.geneModifications.map((g, i) => <MobGeneModificationEntry key={i} modification={g} />)}
            </div>
          }
          {geneData.dietModifications !== undefined && geneData.dietModifications.length !== 0 &&
            <div className="mb-2">
              <h4 className="text-lg font-semibold text-white">Diet Changes:</h4>
              <div className="flex flex-row">
                {geneData.dietModifications.map((diet, i) => <MobDietModificationEntry key={i} diet={diet} />)}
              </div>
            </div>
          }
          {geneData.colours.length !== 0 &&
            <div className="mb-2">
              <h4 className="text-lg font-semibold text-white">Colors:</h4>
              {Array(Math.ceil(geneData.colours.length / chunkSize)).fill(0)
                .map((_, i) => (
                  <div key={i} className="flex flex-row">
                    {geneData.colours.slice(i * chunkSize, (i + 1) * chunkSize)
                      .map((colour, i) => <MobColourModificationEntry key={i} colour={colour} />)}
                  </div>
                ))
              }
            </div>
          }
        </div>
      </div>
    </div>
  )
}


const MobGeneModificationEntry = ({ modification }: { modification: GeneModification }) => {
  const positive = modification.amount > 0
  return (
    <div className="flex flex-row">
      <a href={`#${formatGene(modification.gene)}`} className="text-white">
        {modification.gene}:
      </a>
      <span className={(positive ? "text-green-600" : "text-red-600") + " ml-2"}>
        {positive ? "+" : "-"}{Math.round(Math.abs(modification.amount) * 100)}%
      </span>
    </div>
  )
}

const MobDietModificationEntry = ({ diet }: { diet: DietModification }) => {
  return (
    <div className="flex flex-col text-white mr-10">
      <a href={`#${formatDiet(diet.name)}`} className="font-semibold text-white">{diet.name}</a>
      <div className="w-16 h-16 relative mt-2 mr-2">
        <Image layout="fill" objectFit="contain" src={`/images/guides/genetics/${diet.image}`} />
      </div>
      <span className="text-blue-600">+{diet.water} Water</span>
      <span className="text-amber-600">+{diet.food} Food</span>
    </div>
  )
}

const MobColourCell = ({ colours, text }: { colours: string[], text?: string }) => {
  return (
    <div className="w-48 h-8 m-1 relative border-2 border-black">
      <div className="z-0 absolute w-full h-full flex flex-row">
        {colours.map((colour, i) => <div className="flex-grow" key={i} style={{ backgroundColor: colour }} />)}
      </div>
      <div className="absolute font-semibold text-gray-500 mix-blend-difference w-full h-full flex justify-center items-center">
        {text}
      </div>
    </div>
  )
}

const MobColourModificationEntry = ({ colour }: { colour: ColourModification }) => {
  if (typeof colour === "string") {
    return <MobColourCell colours={[colour]} />
  }

  const values = colour.colour
  const valuesList = typeof values === "string" ? [values] : values
  return (
    <MobColourCell colours={valuesList} text={colour.varient} />
  )
}






const MobGeneticsByDiet = () => {
  return (
    <div className="mt-5">
      <a id={geneticsByDietId} href={`#${geneticsByDietId}`} className="text-4xl font-semibold text-white mt-32">Genetics By Diet</a>
      {Array.from(reverseMobDiets.keys()).sort().map(key => {
        const dietInfo = reverseMobDiets.get(key)
        if (!dietInfo) {
          return <>!!ERROR!!</>
        }
        return <MobGeneticsByDietEntry name={key} data={dietInfo} />
      })}
    </div>
  )
}

const MobGeneticsByDietEntry = ({ name, data }: {
  name: string, data: {
    image: string;
    data: {
      mob: GeneData;
      diet: DietModification;
    }[];
  }
}) => {
  const id = formatDiet(name)
  return (
    <div key={name} className="mb-5 flex flex-col">
      <a href={`#${id}`} id={id} className="text-2xl font-semibold text-white">{name}</a>
      <div className="flex flex-row w-full">
        <div className="w-32 h-32 relative mt-2 mr-2">
          <Image layout="fill" objectFit="contain" src={`/images/guides/genetics/${data.image}`} />
        </div>
        {data.data.map((info, i) => (
          <div key={i} className="flex flex-col mr-5">
            <a href={`#${formatEntity(info.mob)}`} className="text-white font-semibold">{info.mob.name}</a>
            <span className="text-blue-600">+{info.diet.water} Water</span>
            <span className="text-amber-600">+{info.diet.food} Food</span>
          </div>
        ))}
      </div>
    </div>
  )
}








const MobGeneticsByGene = () => {
  return (
    <div className="mt-5">
      <a id={geneticsByGeneId} href={`#${geneticsByGeneId}`} className="text-4xl font-semibold text-white mt-32">Genetics By Diet</a>
      {Array.from(reverseMobGenetics.keys()).sort().map(key => {
        const geneInfo = reverseMobGenetics.get(key)
        if (!geneInfo) {
          return <>!!ERROR!!</>
        }
        return <MobGeneticsByGeneEntry name={key} data={geneInfo} />
      })}
    </div>
  )
}

const MobGeneticsByGeneEntry = ({ name, data }: {
  name: string, data: {
    data: GeneData;
    amount: number;
  }[]
}) => {
  const id = formatGene(name)
  return (
    <div key={name} className="mb-5 flex flex-col">
      <a href={`#${id}`} id={id} className="text-2xl font-semibold text-white">{name}</a>
      {data.map(datum => {
        const positive = datum.amount > 0
        return (
          <div className="flex flex-row">
            <a href={`#${formatEntity(datum.data)}`} className="text-white">
              {datum.data.name}:
            </a>
            <span className={(positive ? "text-green-600" : "text-red-600") + " ml-2"}>
              {positive ? "+" : "-"}{Math.round(Math.abs(datum.amount) * 100)}%
            </span>
          </div>
        )
      })}
    </div>)
}


const formatEntity = (entity: GeneData) => `entity-${entity.name.replaceAll(" ", "-").toLowerCase()}`
const formatDiet = (diet: string) => `diet-${diet.replaceAll(" ", "-").toLowerCase()}`
const formatGene = (gene: string) => `gene-${gene.replaceAll(" ", "-").toLowerCase()}`

export default MobGeneticsPage;