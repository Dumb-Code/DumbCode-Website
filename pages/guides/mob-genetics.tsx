import Image from "next/image";
import Footer from "../../components/Footer";
import Header from "../../components/Header";
import Navbar from "../../components/Navbar";
import { GeneData, mobGenetics } from "../../data/mobGenetics";

const MobGeneticsPage = () => {
  return (
    <div className="h-screen overflow-x-hidden bg-neutral-800">
      <Header pageName="Genetics Guide" />
      <Navbar />
      <div className="flex flex-col md:flex-row-reverse px-10 lg:px-32 2xl:px-60">
        <section className="w-screen bg-neutral-800 pt-10 overflow-hidden pr-20 2xl:pr-20">
          <h1 className="text-5xl font-semibold text-white">Genetics Guide</h1>
          <div className="pr-10 pt-2 text-white">
            This guide shows you the genetics generated by different mobs.
          </div>
          <MobGeneticsByMob />
          <MobGeneticsByDiet />
          <MobGeneticsByGene />
        </section>
      </div>
      <Footer />
    </div>
  );
}


const MobGeneticsByMob = () => {
  return (
    <div className="mt-5">
      <h2 className="text-2xl font-semibold text-white">Genetics By Mob</h2>
      {mobGenetics.map((geneData, i) => <MobGeneticEntry key={i} geneData={geneData} />)}
    </div>
  )
}

const chunkSize = 4;

const MobGeneticEntry = ({ geneData }: { geneData: GeneData }) => {

  return (
    <div className="mt-10">
      <h3 className="text-2xl font-semibold text-white">{geneData.name}</h3>
      <div className="flex flex-row">
        <div className="w-32 h-32 relative">
          <Image layout="fill" objectFit="contain" src={`/images/guides/genetics/${geneData.image}`} />
        </div>
        <div className="flex-grow flex flex-col ">
          {geneData.geneModifications.length !== 0 &&
            <div className="mb-2">
              <h4 className="text-lg font-semibold text-white">Genes:</h4>
              {geneData.geneModifications.map((g, i) => <MobGeneModificationEntry key={i} modification={g} />)}
            </div>
          }
          {geneData.dietModifications !== undefined && geneData.dietModifications.length !== 0 &&
            <div className="mb-2">
              <h4 className="text-lg font-semibold text-white">Diet Changes:</h4>
              <div className="flex flex-row">
                {geneData.dietModifications.map((diet, i) => <MobDietModificationEntry key={i} diet={diet} />)}
              </div>
            </div>
          }
          {geneData.colours.length !== 0 &&
            <div className="mb-2">
              <h4 className="text-lg font-semibold text-white">Colors:</h4>
              {Array(Math.ceil(geneData.colours.length / chunkSize)).fill(0)
                .map((_, i) => (
                  <div key={i} className="flex flex-row">
                    {geneData.colours.slice(i * chunkSize, (i + 1) * chunkSize)
                      .map((colour, i) => <MobColourModificationEntry key={i} colour={colour} />)}
                  </div>
                ))
              }
            </div>
          }
        </div>
      </div>
    </div>
  )
}

const MobGeneticsByDiet = () => {
  return (
    <></>
  )
}

const MobGeneticsByGene = () => {
  return (
    <></>
  )
}

const MobGeneModificationEntry = ({ modification }: { modification: GeneData['geneModifications'][number] }) => {
  const positive = modification.amount > 0
  return (
    <div className="flex flex-row">
      <span className="text-white">
        {modification.gene}:
      </span>
      <span className={(positive ? "text-green-600" : "text-red-600") + " ml-2"}>
        {positive ? "+" : "-"}{Math.round(Math.abs(modification.amount) * 100)}%
      </span>
    </div>
  )
}

const MobDietModificationEntry = ({ diet }: { diet: NonNullable<GeneData['dietModifications']>[number] }) => {
  return (
    <div className="flex flex-col text-white mr-10">
      <h5 className="font-semibold text-white">{diet.name}</h5>
      <div className="w-16 h-16 relative">
        <Image layout="fill" objectFit="contain" src={`/images/guides/genetics/${diet.image}`} />
      </div>
      <span className="text-blue-600">+{diet.water} Water</span>
      <span className="text-amber-600">+{diet.food} Food</span>
    </div>
  )
}

const MobColourCell = ({ colours, text }: { colours: string[], text?: string }) => {
  return (
    <div className="w-48 h-8 m-1 relative border-2 border-black">
      <div className="z-0 absolute w-full h-full flex flex-row">
        {colours.map((colour, i) => <div className="flex-grow" key={i} style={{ backgroundColor: colour }} />)}
      </div>
      <div className="absolute font-semibold text-gray-500 mix-blend-difference w-full h-full flex justify-center items-center">
        {text}
      </div>
    </div>
  )
}

const MobColourModificationEntry = ({ colour }: { colour: NonNullable<GeneData['colours']>[number] }) => {
  if (typeof colour === "string") {
    return <MobColourCell colours={[colour]} />
  }

  const values = colour.colour
  const valuesList = typeof values === "string" ? [values] : values
  return (
    <MobColourCell colours={valuesList} text={colour.varient} />
  )
}

export default MobGeneticsPage;